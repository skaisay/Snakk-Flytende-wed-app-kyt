/**
 * –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –î–õ–Ø –ù–û–†–í–ï–ñ–°–ö–û–ì–û –ê–°–°–ò–°–¢–ï–ù–¢–ê
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 100 –ì–ë –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
 */

// ================================================
// –û–°–ù–û–í–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• (database.js –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å)
// ================================================

// ================================================
// –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–ê–ó–ê–ú–ò –î–ê–ù–ù–´–•
// ================================================
class MegaDatabaseManager {
    constructor() {
        this.databases = new Map();
        this.searchIndex = new Map();
        this.cache = new Map();
        this.loadedDatabases = new Set();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        this.registerDatabase('main', NORWEGIAN_DATABASE);
        
        console.log('üöÄ –ú–µ–≥–∞-—Å–∏—Å—Ç–µ–º–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    registerDatabase(name, database) {
        this.databases.set(name, database);
        this.loadedDatabases.add(name);
        this.buildSearchIndex(name, database);
        console.log(`üì¶ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö "${name}" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
     */
    buildSearchIndex(dbName, database) {
        console.log(`üîç –°—Ç—Ä–æ—é –∏–Ω–¥–µ–∫—Å –¥–ª—è –±–∞–∑—ã "${dbName}"`);
        
        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        if (database.translations) {
            Object.keys(database.translations).forEach(key => {
                const searchKey = key.toLowerCase();
                if (!this.searchIndex.has(searchKey)) {
                    this.searchIndex.set(searchKey, []);
                }
                this.searchIndex.get(searchKey).push({
                    database: dbName,
                    type: 'translation',
                    key: key,
                    value: database.translations[key]
                });
            });
        }

        // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å
        if (database.vocabulary) {
            Object.keys(database.vocabulary).forEach(category => {
                Object.keys(database.vocabulary[category]).forEach(key => {
                    const searchKey = key.toLowerCase();
                    if (!this.searchIndex.has(searchKey)) {
                        this.searchIndex.set(searchKey, []);
                    }
                    this.searchIndex.get(searchKey).push({
                        database: dbName,
                        type: 'vocabulary',
                        category: category,
                        key: key,
                        value: database.vocabulary[category][key]
                    });
                });
            });
        }
    }

    /**
     * –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
     */
    smartSearch(query) {
        const searchQuery = query.toLowerCase().trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        if (this.cache.has(searchQuery)) {
            console.log('‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–µ—à–∞');
            return this.cache.get(searchQuery);
        }

        let results = [];

        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (this.searchIndex.has(searchQuery)) {
            results = this.searchIndex.get(searchQuery);
        } else {
            // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for (const [key, value] of this.searchIndex) {
                if (key.includes(searchQuery) || searchQuery.includes(key)) {
                    results.push(...value);
                }
            }
        }

        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.cache.set(searchQuery, results);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        if (this.cache.size > 10000) {
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }

        return results;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã –∏–∑ –≤—Å–µ—Ö –±–∞–∑
     */
    getConversationFromAllDatabases(type) {
        const allResponses = [];
        
        for (const [dbName, database] of this.databases) {
            if (database.conversations && database.conversations[type]) {
                allResponses.push(...database.conversations[type]);
            }
        }
        
        if (allResponses.length === 0) return null;
        
        return allResponses[Math.floor(Math.random() * allResponses.length)];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ—Ö –±–∞–∑
     */
    getRandomWordFromAllDatabases() {
        const allWords = [];
        
        for (const [dbName, database] of this.databases) {
            if (database.vocabulary) {
                Object.keys(database.vocabulary).forEach(category => {
                    Object.keys(database.vocabulary[category]).forEach(word => {
                        allWords.push({
                            norwegian: word,
                            russian: database.vocabulary[category][word],
                            category: category,
                            database: dbName
                        });
                    });
                });
            }
        }
        
        if (allWords.length === 0) return '–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç';
        
        const randomWord = allWords[Math.floor(Math.random() * allWords.length)];
        return `${randomWord.norwegian} ‚Äî ${randomWord.russian} (${randomWord.category})`;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async loadExtraDatabase(filename) {
        try {
            console.log(`üì• –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É: ${filename}`);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            const response = await fetch(`./${filename}`);
            const database = await response.json();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑—É
            const dbName = filename.replace('.json', '');
            this.registerDatabase(dbName, database);
            
            return true;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${filename}:`, error);
            return false;
        }
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    getStats() {
        let totalTranslations = 0;
        let totalVocabulary = 0;
        let totalConversations = 0;

        for (const [dbName, database] of this.databases) {
            if (database.translations) {
                totalTranslations += Object.keys(database.translations).length;
            }
            if (database.vocabulary) {
                Object.keys(database.vocabulary).forEach(category => {
                    totalVocabulary += Object.keys(database.vocabulary[category]).length;
                });
            }
            if (database.conversations) {
                Object.keys(database.conversations).forEach(type => {
                    totalConversations += database.conversations[type].length;
                });
            }
        }

        return {
            databases: this.databases.size,
            translations: totalTranslations,
            vocabulary: totalVocabulary,
            conversations: totalConversations,
            indexSize: this.searchIndex.size,
            cacheSize: this.cache.size
        };
    }
}

// ================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–ì–ê-–°–ò–°–¢–ï–ú–´
// ================================================
let megaDB;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    megaDB = new MegaDatabaseManager();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = megaDB.getStats();
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–≥–∞-—Å–∏—Å—Ç–µ–º—ã:', stats);
});

// ================================================
// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
// ================================================

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
function searchInDatabase(query) {
    if (!megaDB) return null;
    
    const results = megaDB.smartSearch(query);
    
    if (results.length > 0) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = results[0];
        if (result.type === 'translation') {
            return `${result.key} ‚Äî ${result.value}`;
        } else if (result.type === 'vocabulary') {
            return `${result.key} ‚Äî ${result.value} (${result.category})`;
        }
    }
    
    return null;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã
 */
function getConversationResponse(type) {
    if (!megaDB) return null;
    return megaDB.getConversationFromAllDatabases(type);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞
 */
function getRandomWord() {
    if (!megaDB) return '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞';
    return megaDB.getRandomWordFromAllDatabases();
}

// ================================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ë–£–î–£–©–ï–ì–û –†–ê–°–®–ò–†–ï–ù–ò–Ø
// ================================================

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
 */
async function loadAdditionalDatabases() {
    const additionalDatabases = [
        'norwegian-verbs.json',
        'norwegian-phrases.json',
        'norwegian-grammar.json',
        'norwegian-idioms.json'
    ];
    
    for (const dbFile of additionalDatabases) {
        await megaDB.loadExtraDatabase(dbFile);
    }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
 */
function clearCache() {
    if (megaDB) {
        megaDB.cache.clear();
        console.log('üßπ –ö–µ—à –æ—á–∏—â–µ–Ω');
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 */
function getSystemStats() {
    if (!megaDB) return null;
    return megaDB.getStats();
}